seed: 42


# Models are instantiated using skrl's model instantiator utility
# https://skrl.readthedocs.io/en/latest/api/utils/model_instantiators.html
models:
  separate: False
  policy:  # see gaussian_model parameters
    class: GaussianMixin
    clip_actions: False
    clip_log_std: True
    min_log_std: -20.0
    max_log_std: 2.0
    initial_log_std: 0.0
    network:
      - name: features_extractor
        input: permute(STATES, (0, 3, 1, 2))[:,:,:-1,:]  # PyTorch NHWC -> NCHW.
        layers:
          - conv2d: {out_channels: 3, kernel_size: 5, stride: 2, padding: 2}
          - conv2d: {out_channels: 8, kernel_size: 5, stride: 2, padding: 2}
          - conv2d: {out_channels: 16, kernel_size: 3, stride: 1, padding: 1}
          - conv2d: {out_channels: 16, kernel_size: 3, stride: 1, padding: 1}
          - conv2d: {out_channels: 1, kernel_size: 1, stride: 1, padding: 0}
          - flatten
        normalizations: layer
        normalization_kwargs:
          - { normalized_shape: [ 3, 56, 56 ], eps: 1e-5 }
          - { normalized_shape: [ 8, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 16, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 16, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 1, 28, 28 ], eps: 1e-5 }
        activations: relu
      - name: state_extractor
        input: permute(STATES, (0, 3, 1, 2))[:,:,-1,:]
        layers:
          - flatten
        activations: relu
      - name: net
        input: concatenate([features_extractor,state_extractor[:, :12]], dim=1)
        layers: [128, 64, 32]
        normalizations: batch
        activations: relu
    output: ACTIONS
  value:  # see deterministic_model parameters
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: features_extractor
        input: permute(STATES, (0, 3, 1, 2))[:,:,:-1,:]  # PyTorch NHWC -> NCHW.
        layers:
          - conv2d: {out_channels: 3, kernel_size: 5, stride: 2, padding: 2}
          # - layernorm: {3, 56, 56}
          - conv2d: {out_channels: 8, kernel_size: 5, stride: 2, padding: 2}
          # - layernorm: {8, 28, 28}
          - conv2d: {out_channels: 16, kernel_size: 3, stride: 1, padding: 1}
          # - layernorm: {16, 28, 28}
          - conv2d: {out_channels: 16, kernel_size: 3, stride: 1, padding: 1}
          # - layernorm: {16, 28, 28}
          - conv2d: {out_channels: 1, kernel_size: 1, stride: 1, padding: 0}
          - flatten
        normalizations: layer
        normalization_kwargs:
          - { normalized_shape: [ 3, 56, 56 ], eps: 1e-5 }
          - { normalized_shape: [ 8, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 16, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 16, 28, 28 ], eps: 1e-5 }
          - { normalized_shape: [ 1, 28, 28 ], eps: 1e-5 }
        activations: relu
      - name: state_extractor
        input: permute(STATES, (0, 3, 1, 2))[:,:,-1,:]
        layers:
          - flatten
        activations: relu
      - name: net
        input: concatenate([features_extractor, state_extractor[:, :12]], dim=1)
        layers: [128, 64, 32]
        normalizations: batch
        activations: elu
    output: ONE

# Rollout memory
# https://skrl.readthedocs.io/en/latest/api/memories/random.html
memory:
  class: RandomMemory
  memory_size: -1  # automatically determined (same as agent:rollouts)


# PPO agent configuration (field names are from PPO_DEFAULT_CONFIG)
# https://skrl.readthedocs.io/en/latest/api/agents/ppo.html
agent:
  class: PPO
  rollouts: 24
  learning_epochs: 5
  mini_batches: 4
  discount_factor: 0.99
  lambda: 0.95
  learning_rate: 5.0e-04
  learning_rate_scheduler: KLAdaptiveLR
  learning_rate_scheduler_kwargs:
    kl_threshold: 0.016
  state_preprocessor: RunningStandardScaler
  state_preprocessor_kwargs: null
  value_preprocessor: RunningStandardScaler
  value_preprocessor_kwargs: null
  random_timesteps: 0
  learning_starts: 0
  grad_norm_clip: 1.0
  ratio_clip: 0.2
  value_clip: 0.2
  clip_predicted_values: True
  entropy_loss_scale: 0.0
  value_loss_scale: 1.0
  kl_threshold: 0.0
  rewards_shaper_scale: 0.01
  time_limit_bootstrap: False
  # logging and checkpoint
  experiment:
    directory: "quadcopter_direct"
    experiment_name: ""
    write_interval: auto
    checkpoint_interval: auto


# Sequential trainer
# https://skrl.readthedocs.io/en/latest/api/trainers/sequential.html
trainer:
  class: SequentialTrainer
  timesteps: 48000000
  environment_info: log
